clean_dat_op$week_centered <- clean_dat_op$Week - 1 # replace week w/week centered; recentered @ week 1
clean_dat_op <- subset(clean_dat_op, !(is.na(clean_dat_op$COND) == TRUE)) # Excluded 5 people with no condition or data
#between-person harmonious passion
weekly_passion_means_op <- aggregate(WEEKLY_PASSION~pid, clean_dat_op, mean, na.rm = TRUE)
names(weekly_passion_means_op) <- c("pid", "person_weekly_passion_mean_op")
clean_dat_op <- plyr::join(clean_dat_op, weekly_passion_means_op, by="pid")
#within-person harmonious passion
clean_dat_op$weekly_passion_grpmc_op <- clean_dat_op$WEEKLY_PASSION - clean_dat_op$person_weekly_passion_mean_op
# Creating lagged variables
clean_dat_op <- slide(clean_dat_op, Var='weekly_passion_grpmc_op', GroupVar="pid", slideBy = -1)
clean_dat_op <- slide(clean_dat_op, Var='proportion', GroupVar="pid", slideBy = -1)
# Rename lagged variables
clean_dat_op$weekly_passion_grpmc_op_lagged <- clean_dat_op$`weekly_passion_grpmc_op-1`
clean_dat_op$proportion_lagged <- clean_dat_op$`proportion-1`
# Omit the first time point for each person
minimum_week <- aggregate(data=clean_dat_op, week_centered~pid, min)
minimum_week$this_is_the_min_week <- 1
clean_dat_op <- plyr::join(clean_dat_op, minimum_week, by=c("pid", "week_centered"), type="left")
clean_dat_op <- clean_dat_op[is.na(clean_dat_op$this_is_the_min_week),]
clean_dat_op$COND_factor <- as.factor(clean_dat_op$COND)
# Merge HP and OP datasets by participant ID (pid) and week
clean_dat_combined <- merge(clean_dat_hp, clean_dat_op, by = c("pid", "week_centered", "COND_factor", "proportion"), suffixes = c("_hp", "_op"))
library(dplyr)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
library(dplyr)
library(dplyr)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
library(dplyr)
library(dplyr)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
library(plyr)
library(dplyr)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
detach("package:plyr", unload = TRUE)
library(dplyr)
detach("package:plyr", unload = TRUE)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
print(most_complete_pid)
library(ggplot2)
library(dplyr)
library(tidyr)
# Select target participant
target_pid <- 3192
# Prepare data: reconstruct raw HP and OP
person_data <- clean_dat_combined %>%
filter(pid == target_pid) %>%
mutate(
hp_total = weekly_passion_grpmc_hp + person_weekly_passion_mean_hp,
op_total = weekly_passion_grpmc_op + person_weekly_passion_mean_op
) %>%
filter(!is.na(hp_total) & !is.na(op_total)) %>%
arrange(week_centered)
# Dynamically compute means
mean_hp <- mean(person_data$hp_total, na.rm = TRUE)
mean_op <- mean(person_data$op_total, na.rm = TRUE)
# Reshape data for plotting
plot_data <- person_data %>%
select(week_centered, hp_total, op_total) %>%
pivot_longer(cols = c(hp_total, op_total), names_to = "Passion_Type", values_to = "Value")
# Custom colors
color_map <- c("hp_total" = "blue", "op_total" = "red")
# Plot
ggplot(plot_data, aes(x = week_centered, y = Value, color = Passion_Type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
# Dashed mean lines
geom_hline(yintercept = mean_hp, linetype = "dashed", color = "blue", size = 0.8) +
geom_hline(yintercept = mean_op, linetype = "dashed", color = "red", size = 0.8) +
# Add mean value text next to each line
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_hp,
label = paste0("M = ", round(mean_hp, 2)),
color = "blue", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_op,
label = paste0("M = ", round(mean_op, 2)),
color = "red", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
scale_color_manual(
values = color_map,
labels = c("Harmonious Passion", "Obsessive Passion")
) +
labs(
title = paste("Participant", target_pid, ": Week-to-Week HP and OP with Means"),
x = "Week (Centered)",
y = "Passion Score",
color = "Passion Type"
) +
theme_minimal() +
xlim(min(person_data$week_centered), max(person_data$week_centered) + 2)
library(dplyr)
detach("package:plyr", unload = TRUE)
library(dplyr)
#detach("package:plyr", unload = TRUE)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
print(most_complete_pid)
### plotting graph
library(ggplot2)
library(dplyr)
library(tidyr)
# Select target participant
target_pid <- 3192
# Prepare data: reconstruct raw HP and OP
person_data <- clean_dat_combined %>%
filter(pid == target_pid) %>%
mutate(
hp_total = weekly_passion_grpmc_hp + person_weekly_passion_mean_hp,
op_total = weekly_passion_grpmc_op + person_weekly_passion_mean_op
) %>%
filter(!is.na(hp_total) & !is.na(op_total)) %>%
arrange(week_centered)
# Dynamically compute means
mean_hp <- mean(person_data$hp_total, na.rm = TRUE)
mean_op <- mean(person_data$op_total, na.rm = TRUE)
# Reshape data for plotting
plot_data <- person_data %>%
select(week_centered, hp_total, op_total) %>%
pivot_longer(cols = c(hp_total, op_total), names_to = "Passion_Type", values_to = "Value")
# Custom colors
color_map <- c("hp_total" = "cadetblue4", "op_total" = "coral3")
# Plot
ggplot(plot_data, aes(x = week_centered, y = Value, color = Passion_Type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
# Dashed mean lines
geom_hline(yintercept = mean_hp, linetype = "dashed", color = "blue", size = 0.8) +
geom_hline(yintercept = mean_op, linetype = "dashed", color = "red", size = 0.8) +
# Add mean value text next to each line
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_hp,
label = paste0("M = ", round(mean_hp, 2)),
color = "cadetblue4", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_op,
label = paste0("M = ", round(mean_op, 2)),
color = "coral3", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
scale_color_manual(
values = color_map,
labels = c("Harmonious Passion", "Obsessive Passion")
) +
labs(
title = paste("Participant", target_pid, ": Week-to-Week HP and OP with Means"),
x = "Week (Centered)",
y = "Passion Score",
color = "Passion Type"
) +
theme_minimal() +
xlim(min(person_data$week_centered), max(person_data$week_centered) + 2)
library(dplyr)
#detach("package:plyr", unload = TRUE)
# Count number of complete HP and OP records per person
most_complete_pid <- clean_dat_combined %>%
filter(!is.na(weekly_passion_grpmc_hp) & !is.na(weekly_passion_grpmc_op)) %>%
group_by(pid) %>%
summarise(n_weeks = n()) %>%
arrange(desc(n_weeks)) %>%
slice(1)
print(most_complete_pid)
### plotting graph
library(ggplot2)
library(dplyr)
library(tidyr)
# Select target participant
target_pid <- 3192
# Prepare data: reconstruct raw HP and OP
person_data <- clean_dat_combined %>%
filter(pid == target_pid) %>%
mutate(
hp_total = weekly_passion_grpmc_hp + person_weekly_passion_mean_hp,
op_total = weekly_passion_grpmc_op + person_weekly_passion_mean_op
) %>%
filter(!is.na(hp_total) & !is.na(op_total)) %>%
arrange(week_centered)
# Dynamically compute means
mean_hp <- mean(person_data$hp_total, na.rm = TRUE)
mean_op <- mean(person_data$op_total, na.rm = TRUE)
# Reshape data for plotting
plot_data <- person_data %>%
select(week_centered, hp_total, op_total) %>%
pivot_longer(cols = c(hp_total, op_total), names_to = "Passion_Type", values_to = "Value")
# Custom colors
color_map <- c("hp_total" = "cadetblue4", "op_total" = "coral3")
# Plot
ggplot(plot_data, aes(x = week_centered, y = Value, color = Passion_Type)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
# Dashed mean lines
geom_hline(yintercept = mean_hp, linetype = "dashed", color = "cadetblue4", size = 0.8) +
geom_hline(yintercept = mean_op, linetype = "dashed", color = "coral3", size = 0.8) +
# Add mean value text next to each line
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_hp,
label = paste0("M = ", round(mean_hp, 2)),
color = "cadetblue4", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
annotate("text", x = max(person_data$week_centered) + 0.5, y = mean_op,
label = paste0("M = ", round(mean_op, 2)),
color = "coral3", fontface = "bold", hjust = 0, vjust = -0.3, size = 4) +
scale_color_manual(
values = color_map,
labels = c("Harmonious Passion", "Obsessive Passion")
) +
labs(
title = paste("Participant", target_pid, ": Week-to-Week HP and OP with Means"),
x = "Week (Centered)",
y = "Passion Score",
color = "Passion Type"
) +
theme_minimal() +
xlim(min(person_data$week_centered), max(person_data$week_centered) + 2)
knitr::opts_chunk$set(echo = TRUE)
ggplot(df, aes(x = Occupation, fill = BMI.Category)) +
geom_bar(position = "fill") +
coord_flip() +
labs(
title = "BMI Distribution by Occupation (Honest Version)",
x = "Occupation",
y = "Proportion",
fill = "BMI Category"
) +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
df <- read.csv("sleep.csv")
df$OccupationGroup <- ifelse(df$Occupation %in% c("Doctor", "Nurse"),
"Healthcare Professional",
"Other Occupations")
df$WeightCategory <- ifelse(df$BMI.Category %in% c("Normal", "Normal Weight"),
"Normal",
"Overweight")
df %>%
group_by(OccupationGroup, WeightCategory) %>% # Group by occupation type and BMI category
summarise(count = n()) %>% # Count number of people in each group
mutate(percent = count / sum(count) * 100) %>% # Convert counts to % within each occupation group
ggplot(aes(x = OccupationGroup, y = percent, fill = WeightCategory)) +
geom_col(position = "stack") + # Make stacked bar plot
coord_cartesian(ylim = c(30, 50)) + # Truncate Y-axis to exaggerate differences
labs(
title = "Healthcare Workers More Likely Overweight",
x = "",
y = "Percentage"
) +
theme_minimal()
# Recode WeightCategory as a binary outcome
df$OverweightBinary <- ifelse(df$WeightCategory == "Overweight", 1, 0)
# Fit the logistic regression model
model <- lm(OverweightBinary ~ OccupationGroup, data = df)
# Summary of the model
summary(model)
df$HealthcareBinary <- ifelse(df$OccupationGroup == "Healthcare Professional", 1, 0)
df$DoctorBinary <- ifelse(df$Occupation == "Doctor", 1, 0)
df$NurseBinary <- ifelse(df$Occupation == "Nurse", 1, 0)
# cor(df$HealthcareBinary, df$OverweightBinary) i think we should delete these as they go against what we saw above with the groupings (no statistically significant difference in overweight status between healthcare professionals and others (when grouped together))
cor(df$DoctorBinary, df$OverweightBinary)
cor(df$NurseBinary, df$OverweightBinary)
# chisq.test(table(df$HealthcareBinary, df$OverweightBinary))
chisq.test(table(df$DoctorBinary, df$OverweightBinary))
chisq.test(table(df$NurseBinary, df$OverweightBinary))
ggplot(df, aes(x = Occupation, fill = BMI.Category)) +
geom_bar(position = "fill") +
coord_flip() +
labs(
title = "BMI Distribution by Occupation (Honest Version)",
x = "Occupation",
y = "Proportion",
fill = "BMI Category"
) +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Correct recoding of "Normal Weight" to "Normal"
df$BMI.Category.Correct <- df$BMI.Category
df$BMI.Category.Correct <- ifelse("Normal Weight", "Normal", df$BMI.Category.Correct) # debug
ggplot(df, aes(x = Occupation, fill = BMI.Category.Correct)) +
geom_bar(position = "fill") +
coord_flip() +
labs(
title = "BMI Distribution by Occupation (Honest Version)",
x = "Occupation",
y = "Proportion",
fill = "BMI Category"
) +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Correct recoding of "Normal Weight" to "Normal"
df$BMI.Category.Correct <- df$BMI.Category
df$BMI.Category.Correct <- ifelse("Normal Weight", "Normal", df$BMI.Category.Correct) # debug
ggplot(df, aes(x = Occupation, fill = BMI.Category.Correct)) +
geom_bar(position = "fill") +
coord_flip() +
labs(
title = "BMI Distribution by Occupation (Honest Version)",
x = "Occupation",
y = "Proportion",
fill = "BMI Category"
) +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
# Correct recoding of "Normal Weight" to "Normal"
df$BMI.Category.Correct <- ifelse(df$BMI.Category == "Normal Weight", "Normal", df$BMI.Category)
ggplot(df, aes(x = Occupation, fill = BMI.Category.Correct)) +
geom_bar(position = "fill") +
coord_flip() +
labs(
title = "BMI Distribution by Occupation (Honest Version)",
x = "Occupation",
y = "Proportion",
fill = "BMI Category"
) +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal()
library(readxl)
library(car)
library (interactions)
setwd("~/Documents/UNC/PSYC 533H/533HProject")
dat <- read_excel("prog_data_qualtrics.xlsx")
#### Part 1: Data Cleaning ####
# basic cleaning
dat <- dat[-1, ] # removing labels row
as.numeric(dat$Finished) # making characters to numbers for filtering
dat <- dat[dat$Finished == 1, ] # removing unfinished surveys
dat <- dat[, 12:51] # removing unnecessary columns
# columns to numeric
cols_to_convert <- setdiff(names(dat), "Q4_3_TEXT") # exclude text entry
dat[cols_to_convert] <- sapply(dat[cols_to_convert], function(x) as.numeric(as.character(x)))
# creating a reverse scoring function
reverse <- function(x) { 6 - x }
# extraversion: 1R, 6, 11, 16, 21R, 26R
dat$Extraversion <- rowMeans(cbind(
reverse(dat$Q12_1),   # 1R
dat$Q12_6,            # 6
dat$Q13_1,            # 11
dat$Q13_6,            # 16
reverse(dat$Q14_1),   # 21R
reverse(dat$Q14_6)    # 26R
), na.rm = TRUE)
# agreeableness: 2, 7R, 12, 17R, 22, 27R
dat$Agreeableness <- rowMeans(cbind(
dat$Q12_2,            # 2
reverse(dat$Q12_7),   # 7R
dat$Q13_2,            # 12
reverse(dat$Q13_7),   # 17R
dat$Q14_2,            # 22
reverse(dat$Q14_7)    # 27R
), na.rm = TRUE)
# conscientiousness: 3R, 8R, 13, 18, 23, 28R
dat$Conscientiousness <- rowMeans(cbind(
reverse(dat$Q12_3),   # 3R
reverse(dat$Q12_8),   # 8R
dat$Q13_3,            # 13
dat$Q13_8,            # 18
dat$Q14_3,            # 23
reverse(dat$Q14_8)    # 28R
), na.rm = TRUE)
# negative Emotionality (Neuroticism): 4, 9, 14R, 19R, 24R, 29
dat$Neuroticism <- rowMeans(cbind(
dat$Q12_4,            # 4
dat$Q12_9,            # 9
reverse(dat$Q13_4),   # 14R
reverse(dat$Q13_9),   # 19R
reverse(dat$Q14_4),   # 24R
dat$Q14_9             # 29
), na.rm = TRUE)
# open-Mindedness: 5, 10R, 15, 20R, 25, 30R
dat$Openness <- rowMeans(cbind(
dat$Q12_5,            # 5
reverse(dat$Q12_10),  # 10R
dat$Q13_5,            # 15
reverse(dat$Q13_10),  # 20R
dat$Q14_5,            # 25
reverse(dat$Q14_10)   # 30R
), na.rm = TRUE)
# life satisfaction score
dat$LifeSatisfaction_Total <- rowSums(dat[, c("Life Satisfaction_1", "Life Satisfaction_2",
"Life Satisfaction_3", "Life Satisfaction_4",
"Life Satisfaction_5")], na.rm = TRUE)
# renaming positive and negative affect columns
names(dat)[9:10] <- c("pos_af", "neg_af")
# Effect Coding Gender using other as base group
dat$Gender <- factor(dat$Q4, levels = c(1, 2, 3), labels = c("Woman", "Man", "Other"))
# coding matrix
C <- rbind(
c( 1,  0),   # Woman
c( 0,  1),   # Man
c(-1, -1)    # Other (reference group in effect coding)
)
contrasts(dat$Gender) <- C
cor(dat[, c("Extraversion", "Agreeableness", "Conscientiousness", "Neuroticism", "Openness")],
dat[, c("pos_af", "neg_af")],
use = "pairwise.complete.obs")
cor(dat[, c("Extraversion", "Agreeableness", "Conscientiousness", "Neuroticism", "Openness")],
dat$LifeSatisfaction_Total,
use = "pairwise.complete.obs")
# Centering Big Five traits
dat$Extraversion_c <- dat$Extraversion - mean(dat$Extraversion, na.rm = TRUE)
dat$Agreeableness_c <- dat$Agreeableness - mean(dat$Agreeableness, na.rm = TRUE)
dat$Conscientiousness_c <- dat$Conscientiousness - mean(dat$Conscientiousness, na.rm = TRUE)
dat$Neuroticism_c <- dat$Neuroticism - mean(dat$Neuroticism, na.rm = TRUE)
dat$Openness_c <- dat$Openness - mean(dat$Openness, na.rm = TRUE)
# Centering affect measures
dat$pos_af_c <- scale(dat$pos_af, center = TRUE, scale = FALSE)
dat$neg_af_c <- scale(dat$neg_af, center = TRUE, scale = FALSE)
# Centering age
dat$age_c <- dat$Q8 - mean(dat$Q8, na.rm = TRUE)
# Main effects of Big Five
model_traits_5 <- lm(LifeSatisfaction_Total ~ Extraversion_c + Agreeableness_c + Conscientiousness_c + Neuroticism_c + Openness_c, data = dat)
summary(model_traits_5)
# Main effects of Big Five Separately
model_traits_ag <- lm(LifeSatisfaction_Total ~ Agreeableness_c, data = dat)
summary(model_traits_ag)
model_traits_con <- lm(LifeSatisfaction_Total ~ Conscientiousness_c, data = dat)
summary(model_traits_con)
model_traits_ex <- lm(LifeSatisfaction_Total ~ Extraversion_c, data = dat)
summary(model_traits_ex)
model_traits_neu <- lm(LifeSatisfaction_Total ~ Neuroticism_c, data = dat)
summary(model_traits_neu)
model_traits_op <- lm(LifeSatisfaction_Total ~ Openness_c, data = dat)
summary(model_traits_op)
model_gender <- lm(LifeSatisfaction_Total ~ Gender, data = dat)
summary(model_gender)
# Gender and age
model_gender_age <- lm(LifeSatisfaction_Total ~ Gender + age_c, data = dat)
summary(model_gender_age)
# Age
model_age <- lm(LifeSatisfaction_Total ~ age_c, data = dat)
summary(model_age)
# Main effects of Big Five
model_traits <- lm(LifeSatisfaction_Total ~ Extraversion_c + Agreeableness_c + Conscientiousness_c + Neuroticism_c + Openness_c + Gender + age_c, data = dat)
summary(model_traits)
# Histogram of residuals
hist(model_traits$residuals, col = "lightblue", prob = TRUE)
lines(density(model_traits$residuals), col = "black", lwd = 2)
curve(dnorm(x, mean = mean(model_traits$residuals), sd = sqrt(var(model_traits$residuals))),
lwd = 2, add = TRUE, col = "red")
# QQ plot
qqnorm(model_traits$residuals)
qqline(model_traits$residuals, lwd = 2)
# Residuals vs. predicted
plot(model_traits$fitted.values, y = model_traits$residuals,
xlab = "Fitted values", ylab = "Residuals")
abline(h = 0, lty = 2, col = "blue")
scatter.smooth(model_traits$fitted.values, y = model_traits$residuals)
abline(h = 0, lty = 2, col = "blue")
# Residuals vs. individual predictors
scatter.smooth(dat$Extraversion_c, y = model_traits$residuals); abline(h = 0, lty = 2, col = "blue")
scatter.smooth(dat$Agreeableness_c, y = model_traits$residuals); abline(h = 0, lty = 2, col = "blue")
scatter.smooth(dat$Conscientiousness_c, y = model_traits$residuals); abline(h = 0, lty = 2, col = "blue")
scatter.smooth(dat$Neuroticism_c, y = model_traits$residuals); abline(h = 0, lty = 2, col = "blue")
scatter.smooth(dat$Openness_c, y = model_traits$residuals); abline(h = 0, lty = 2, col = "blue")
# Partial regression plots
avPlots(model_traits)
# Gender women 1, men 2, other 3
model_gender <- lm(LifeSatisfaction_Total ~ Gender, data = dat)
summary(model_gender)
# H4: The relationship between traits and life satisfaction by gender.
model_gender_extraversion <- lm(Extraversion ~ Gender, data = dat)
summary(model_gender_extraversion)
model_gender_agreeableness <- lm(Agreeableness ~ Gender, data = dat)
summary(model_gender_agreeableness)
model_gender_conscientiousness <- lm(Conscientiousness ~ Gender, data = dat)
summary(model_gender_conscientiousness)
model_gender_neuroticism <- lm(Neuroticism ~ Gender, data = dat)
summary(model_gender_neuroticism)
model_gender_openness <- lm(Openness ~ Gender, data = dat)
summary(model_gender_openness)
# Gender × Trait Interactions Predicting Life Satisfaction (H5)
# Agreeableness × Gender
model_agree_gender <- lm(LifeSatisfaction_Total ~ Agreeableness_c * Gender, data = dat)
summary(model_agree_gender)
interact_plot(model_agree_gender, pred = Agreeableness_c, modx = Gender)
sim_slopes(model_agree_gender, pred = Agreeableness_c, modx = Gender)
# Neuroticism × Gender
model_neuro_gender <- lm(LifeSatisfaction_Total ~ Neuroticism_c * Gender, data = dat)
summary(model_neuro_gender)
interact_plot(model_neuro_gender, pred = Neuroticism_c, modx = Gender)
sim_slopes(model_neuro_gender, pred = Neuroticism_c, modx = Gender)
# Predicting Positive Affect
model_traits_pa <- lm(pos_af ~ Extraversion_c + Agreeableness_c + Conscientiousness_c + Neuroticism_c + Openness_c, data = dat)
summary(model_traits_pa)
# Predicting Negative Affect
model_traits_na <- lm(neg_af ~ Extraversion_c + Agreeableness_c + Conscientiousness_c + Neuroticism_c + Openness_c, data = dat)
summary(model_traits_na)
